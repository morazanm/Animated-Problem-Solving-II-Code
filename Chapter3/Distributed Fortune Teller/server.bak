;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname server) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp")) #f)))

(define FORTUNES '("Do not violate the prime directive"
                   "0.67 seconds is an eternity for an android"
                   "Don't be left with nothing but your bones"
                   "Stay down, honor has been served"
                   "Reach for the final frontier"))

;; A universe is a (listof iworld)

(define INIT-UNIV '())
(define UNIV2 (list iworld1))

;; universe iworld --> universe
;; Purpose: Add the given world to the given universe
(define (add-new-world u iw) (cons iw u))

;; Sample expressions for add-new-world
(define ADD1 (cons iworld1 INIT-UNIV))
(define ADD2 (cons iworld2 UNIV2))

;; Tests using sample computation for add-new-world
(check-expect (add-new-world INIT-UNIV iworld1) ADD1)
(check-expect (add-new-world UNIV2     iworld2) ADD2)

;; Tests using sample values for add-new-world
(check-expect (add-new-world (list world2) iworld3)
              (list iworld3 iworld2))


;; universe iworld tsm --> bundle
;; Purpose: To process the given to-server message
(define (process-message u iw m)
  (if (eq? m 'bye)
      (make-bundle (filter (λ (w)
                             (not (equal? (iworld-name w)
                                          (iworld-name iw))))
                           u)
                   '()
                   (list iw))
      (make-bundle u
                   (list (make-mail iw (list-ref FORTUNES (random (length FORTUNES)))))
                   '())))

;; Sample expressions for process-message
(define PM1 (make-bundle (filter (λ (w)
                                   (not (equal? (iworld-name w)
                                                (iworld-name iworld1))))
                                 UNIV2)
                         '()
                         (list iw)))
(define PM2 (make-bundle UNIV2
                         (list (make-mail iworld1
                                          (list-ref FORTUNES (random (length FORTUNES)))))
                         '()))

;; Tests using sample computations for process-message
(check-expect (process-message UNIV2 iworld1 'bye) PM1)
(check-expect (process-message UNIV2 iworld1 'send-fortune) PM2)

;; Tests using sample values for process-message
(check-expect (process-message (list iworld3) iworld3 'send-fortune)
              )


;; Z --> universe
;; Purpose: Run the universe server
(define (run-server a-z)
  (universe
   initU
   (on-new add-new-world)
   (on-msg process-message)
   ;(on-disconnect rm-world)
   ;(on-tick process-tick)
   ))
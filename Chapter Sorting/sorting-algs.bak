;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname sorting-algs) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp")) #f)))
(define LON0 '())
(define LON1 '(71 81 21 28 72 19 49 64 4 47 81 4))
(define LON2 '(91 57 93 5 16 56 61 59 93 49))

; sort: lon --> lon
; Purpose: Sort given lon in nondecreasing order
(define (insertion-sort a-lon)
  (local [; insert: a-num lon --> lon
          ; Purpose: To insert a num into a lon sorted in non-decreasing order
          (define (insert a-num a-lon)
            (cond 	[(empty? a-lon) (cons a-num empty)]
                        [else (cond [(<= a-num (first a-lon)) (cons a-num a-lon)]
                                    [else (cons (first a-lon) 
                                                (insert a-num (rest a-lon)))])]))]
    (cond 	[(empty? a-lon) empty]
                [else (insert (first a-lon) (insertion-sort (rest a-lon)))])))

;; Tests using sample values for insertion-sorting
(check-expect (insertion-sort LON0) '())
(check-expect (insertion-sort LON1) (list 4 4 19 21 28 47 49 64 71 72 81 81))
(check-expect (insertion-sort LON2) (list 5 16 49 56 57 59 61 91 93 93))


; sort: lon --> lon
; Purpose: Sort given lon in nondecreasing order
(define (quick-sorting a-lon)
  (local [;; number lon --> lon
          ;; Purpose: Extract from the given lon the numbers <= to the given number
          (define (smaller= n lst) (filter (λ (i) (<= i n)) lst))

          ;; number lon --> lon
          ;; Purpose: Extract from the given lon the numbers > to the given number
          (define (greater n lst) (filter (λ (i) (> i n)) lst))]
    (if (empty? a-lon)
        '()
        (append (quick-sorting (smaller= (first a-lon) (rest a-lon)))
                (cons (first a-lon)
                      (quick-sorting (greater (first a-lon) (rest a-lon))))))))

;; Tests using sample values for quick-sorting
(check-expect (quick-sorting LON0) '())
(check-expect (quick-sorting LON1) (list 4 4 19 21 28 47 49 64 71 72 81 81))
(check-expect (quick-sorting LON2) (list 5 16 49 56 57 59 61 91 93 93))

; sort: lon --> lon
; Purpose: Sort given lon in nondecreasing order
(define (heap-sorting a-lon)
  (local [;; heap --> number throws error
          ;; Purpose: Return root value of given heap
          (define (heap-root a-heap)
            (if (empty? a-heap)
                (error "heap-root applied to empty heap")
                (first a-heap)))

          ;; heap --> number throws error
          ;; Purpose: Return left subheap of given heap
          (define (heap-lsh a-heap)
            (if (empty? a-heap)
                (error "heap-lsh applied to empty heap")
                (second a-heap)))

          ;; heap --> number throws error
          ;; Purpose: Return right subheap of given heap
          (define (heap-rsh a-heap)
            (if (empty? a-heap)
                (error "heap-rsh applied to empty heap")
                (third a-heap)))

          ;; heap --> lon
          ;; Purpose: Return a lon in nondecreasing order
          (define (sort a-heap)
            (if (empty? a-heap)
                '()
                (cons (first a-heap) (sort (re-heapify a-heap)))))

          ;; heap --> heap
          ;; Purpose: Remove top heap element and return a heap of remaining elements
          (define (re-heapify a-heap)
            (cond [(empty? a-heap) a-heap]
                  [(<= (heap-root (heap-lsh a-heap))
                       (heap-root (heap-lsh a-heap)))
                   (list (heap-root (heap-lsh a-heap))
                         (re-heapify (heap-lsh a-heap))
                         (heap-rsh a-heap))]
                  [else (list (heap-root (heap-rsh a-heap))
                              (heap-lsh a-heap))
                              (re-heapify (heap-rsh a-heap))]))
          ]
    (sort (list 20
                (list 25
                      (list 35 '() '())
                      (list 45 '() '()))
                (list 30
                      (37 '() '())
                      (31 '() '()))))))
;(heapify a-lon))))
